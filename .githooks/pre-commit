#!/bin/bash
#
# This pre-commit hook reformats text files to meet coding guidelines.
#
# Based on https://github.com/rocm/rocBLAS
#
# shellcheck enable=all
# shellcheck disable=2034,2059,2250

set -eEu -o pipefail
shopt -s nocasematch

export PATH=$PATH:/usr/bin:/bin

# Redirect stdout to stderr
exec >&2

# Terminal colors
if [[ -z ${NO_COLOR+x} ]] && tty -s <&2; then
    RED="\033[91m"
    YELLOW="\033[93m"
    GREEN="\033[92m"
    END="\033[0m"
else
    RED=
    YELLOW=
    GREEN=
    END=
fi

usage() {
    cat<<EOF
Usage: $0 [ --reformat] [ --nostage ]

Format files prior to commit so that they match style guidelines

Options:
    --reformat   Reformat all files in the source tree, rather than staged files
    --nostage    Do not add files modified by $0 to the staging area
EOF
    exit 1
}

# Parse command-line options
REFORMAT=
NOSTAGE=
for opt in "$@"; do
    if [[ $opt = -* ]]; then
        case $opt in
            --reformat) REFORMAT=1 ;;
            --nostage)  NOSTAGE=1  ;;
            *) usage
        esac
    fi
done

# Check for existence of clang-format or print error message on how to install
check_clang_format() {
    if ! command -v clang-format >/dev/null; then
        printf "${RED}\nError: clang-format not found\n"
        INSTALL=
        if [[ $OSTYPE = darwin* ]]; then
            if command -v brew >/dev/null; then
                INSTALL="brew install clang-format"
            fi
        elif [[ $OSTYPE = linux* ]]; then
            if [[ -f /etc/redhat-release ]]; then
                if command -v dnf >/dev/null; then
                    INSTALL="sudo dnf install clang-format"
                elif command -v yum >/dev/null; then
                    INSTALL="sudo yum install clang-format"
                fi
            elif [[ -f /etc/debian_version ]] && command -v apt-get >/dev/null; then
                INSTALL="sudo apt-get install clang-format"
            fi
        fi
        if [[ -n $INSTALL ]]; then
            printf "To install clang-format, run:\n\n%s\n${END}" "$INSTALL"
        else
            printf "Install clang-format and make sure it is in PATH.\n${END}"
        fi
        exit 1
    fi
}

# Test a file for changes and add them to the Git commit if changed
detect_change() {
    if ! cmp -s "$1" "$2"; then
        printf "${YELLOW}$3${END}\n" "$1"
        cp -f "$2" "$1"
        [[ -z $NOSTAGE ]] && git add -u "$1"
    fi
}

# Generate list of modified files.
# If --reformat is used, all files are reformatted.
if [[ -n $REFORMAT ]]; then
    files=$(git ls-files --exclude-standard)
else
    if git rev-parse --verify HEAD >/dev/null 2>&1; then
        against=HEAD
    else
        # Initial commit: diff against an empty tree object
        against=1346dd7e51d04da7049e0d49f6cbb81b028db538
    fi
    files=$(git diff-index --cached --name-only "$against")
fi

temp=$(mktemp)
trap 'rm -f "$temp"' EXIT

for file in $files; do
    # Skip non-regular files (e.g. symlinks)
    [[ -f $file ]] || continue

    # Fix formatting on text files
    if echo "$file" | grep -Eiq '\.cc$|\.c$|\.h$|\.hpp$|\.cpp$|\.cxx$|\.cl$|\.in$|\.txt$|\.yaml$|\.yml$|\.sh$|\.py$|\.pl$|\.cmake$|\.md$|\.rst$|\.groovy$|\.ini$|\.awk$|\.csv$|\.s$|\.asm$|\.inc$|\.conf$|\.ld$'; then

        # Change the copyright date at the top of any text files
        if perl -pe 'INIT { exit 1 if !-f $ARGV[0] || -B $ARGV[0]; $year = (localtime)[5] + 1900 } s/^([*\/#\/"*[:space:]]*)Copyright\s+(?:\(C\)\s*)?(\d+)(?:\s*-\s*\d+)?(?=\s+Tactical Computing)/qq($1Copyright (C) $2@{[$year != $2 ? "-$year" : ""]})/ie if $. < 10' "$file" > "$temp"; then
            detect_change "$file" "$temp" "%s: Changing copyright date"
        fi

        # Replace non-ASCII characters with ASCII equivalents
        iconv -s -f utf-8 -t ascii//TRANSLIT "$file" > "$temp"
        detect_change "$file" "$temp" "%s: Converting non-ASCII characters to ASCII equivalents"

        # Run clang-format on C/C++ files
        if echo "$file" | grep -Eiq '\.cc$|\.c$|\.h$|\.hpp$|\.cpp$|\.cxx$'; then
            check_clang_format
            clang-format "$file" > "$temp"
            detect_change "$file" "$temp" "%s: Reformatting with clang-format according to coding guidelines"
        fi

        # Remove whitespace at end of lines; add missing newline at end of file
        sed -e 's/[[:space:]]*$//' "$file" | awk 1 > "$temp"
        detect_change "$file" "$temp" "%s: Correcting whitespace at line endings"
    fi
done
